As 8 leis de Lehman
Criada por Meir Lehman, a Lei de Lehman é uma fonte histórica de bom senso em software, leis que eram generalizáveis e aplicáveis a diferentes contextos na tomada de decisão, planejamento, desenvolvimento e manutenção de software.

01. Mudança contínua - Um software deve ser continuamente adaptado, senão torna-se aos poucos, cada vez menos satisfatório. A cada alteração no ambiente em que ele roda que exija nele melhorias, não fazê-las o tornarão progressivamente menos satisfatório naquilo para o que foi construído.

02. Complexidade crescente - Se não forem tomadas medidas para reduzir ou manter a complexidade de um software, conforme ele é alterado sua complexidade irá aumentar progressivamente. Deve haver um esforço para reduzir a complexidade final de um sistema enquanto este recebe alterações.

03. Auto regulação - A curva pertinente ao processo de evolução de um software em relação a seus atributos e processos são auto reguláveis e próximos a uma curva normal, subindo até um teto, quando começa a diminuir.

04. Conservação da estabilidade organizacional - A velocidade de atividade global efetiva de um software em evolução deverá se manter invariável durante todo o ciclo de vida deste produto. O mix que é levado em consideração para as tomadas de decisão que levam a evolução de um software tendem a ser constantes.

05. Conservação de familiaridade - Durante a vida útil de um software em evolução, a taxa de mudanças tende a ser proporcional ao domínio que a equipe detém. A taxa de evolução de um software está intimamente ligado ao grau de familiaridade dentre os profissionais que o mantém.

06. Crescimento Contínuo - Todo software deve ter o conteúdo funcional continuamente ampliado durante seu ciclo de vida para manter a satisfação dos seus usuários. O projeto inicial não consegue incluir absolutamente tudo o necessário e progressivamente precisará ser aumentado.

07. Qualidade diminuindo - Os softwares desenvolvidos para resolver problemas do mundo real se depreciam progressivamente se eles não receberem as mudanças necessárias para adaptar-se ao que acontece em seu ambiente operacional durante todo o tempo de seu ciclo de vida útil.

08. Sistema de feedback - Os processos de manutenção e evolução de um software refletem sistemas de feedback em múltiplos níveis, loops e agentes e devem ser assim tratados para manter-se significativos.

Refactoring
Refatoração é o processo de modificar um sistema de software para melhorar a estrutura interna do código sem alterar seu comportamento externo. O uso desta técnica aprimora a concepção de um software e evita a deterioração tão comum durante o ciclo de vida de um código

Os tipos de refactoring são importantes no processo de evolução do software, mantendo a integridade do projeto, o refactoring tende a reconstruir o código de forma limpa. A extração de método, seguindo também os principios princípio da responsabilidade única, extrair fazer com que a parte do código será destinada á um fim, sendo assim mais objetivo, de fácil leitura e manutenção de código.
Inline tendo o mesmo coneito de extração, mas o oposto, não é necessário ter uma função isolada no código que será usada apenas 1 vez, pode ser inserida dentro do processo.
Movimentação de método, presente bastante na heranaça á classes filhas, onde caso o método seja utilizado por ambos filhos, o método pode existir no fonte pai. E o mesmo caso um dos filhos não utilize o método, pode existir apenas no fonte filho individualmente.
Extração de classes, presente em situações onde é necessário uma relação de 1xN, separar o objeto filho da classe pai, podendo a classe pai ter N filhos vinculados a ele.
